#include <iostream>

#include <math.h>
/* Содержит в себе:
pow(x,y)
sqrt(x)
sin(rad)
cos(rad)
acos(rad) и т.д.
*/

// число Пи
// #define PI acos(-1) - другой вариант
const double PI = acos(-1);

#define elif else if; // таким образом можно сделать elif в c++

#define x 9;

int main()
{
    bool flag = true;
  
    bool flag1 = false; // Занимает 1 байт; либо true (1), либо false (0)

    /* Логические операторы
    ! - не
    || - или
    && - и
    */
    

    /* Битовые операции
    | - битовое ИЛИ (при сложении с одинаковым разрядом перехода не будет на след. разряд)
    & - битовое И
    ~ - битовая инверсия (все единицы стали нулями, а все нули - единицами)
    << - побитовый сдвиг влево
    >> - побитовый сдвиг вправо
    */

    int a = 0b101; // битовое представление числа 5 (0b указывает систему счисления)
  
    int b = 0b1000; // битовое представление числа 8
  
    std::cout << (a | b) << std::endl; // результат 0b1101
  
    std::cout << (a & b) << std::endl; // результат 0b0000
  
    std::cout << ~a << std::endl; // Битовая инверсия (все единицы стали нулями, а все нули - единицами)

    std::cout << (10 << 2) << std::endl; // то же самое, как и 10 * (2^2), только выполняется быстрее

    std::cout << (10 >> 2) << std::endl; // то же самое, как и 10 / (2^2), только выполняется быстрее



    /* Операторы сравнения:
    <, >, <=, >=, ==, !=
    */

    int cnt = 10;
    std::cout << "cnt > 5" << (cnt > 5) << std::endl;
    bool res = (cnt > 5);



    /* Условные операторы:
    if {}, if {} else {}

    */
    if (cnt == 10)
        std::cout << "CNT == 10" << std::endl; // Если здесь только одна операция, то можно {} не ставить
    

    if (cnt > 10) {
        std::cout << "CNT > 10" << std::endl;
    }
    else {
        std::cout << "CNT <= 10" << std::endl;
    }

    if (cnt < 10) {
        std::cout << "CNT <= 10" << std::endl;
    }
    else if (cnt == 41) {
        std::cout << "CNT == 41" << std::endl;
    }


    // Оператор switch ():
    switch (cnt) { // На основе переменной cnt выполняются операции:
        case 0: // В случае, если cnt == 0, выполняется следующее:
            std::cout << "CNT == 0" << std::endl;
            break; // break нужен, иначе программа пройдётся по всем условиям, а это занимает время
        case 1:
            std::cout << "CNT == 1" << std::endl;
            break;
        case 2:
            std::cout << "CNT == 2" << std::endl;
            break;
        case 3:
        case 4: // либо значение равняется 3, либо 4
            std::cout << "CNT == 3 or 4" << std::endl;
            break;
        default:
            std::cout << "default"; // Если не один из case не выполнился, то выполнится default
    }


    // Тернарный оператор
    std::cout << (cnt > 2 ? "True" : "False") << std::endl; // ? означает проверку выражения, если верно, то первая операция, если нет - то вторая (та, которая после двоеточия) 



    // Область видимости переменной: глобальная и локальная

    std::cout << x; // Выведется глобальная переменная x

    if (cnt > 2) {
        int y = 100; // Это локальная переменная y, за пределами if она не существует
    }


    // Циклы:


    // while
    int i = 0; // Итератор (счётчик)
    while (i < 10) { // Условие, до которого будет выполняться цикл
        std::cout << i << std::endl;
        i++; // Инкремент (увеличение счётчика)
    }

    /* i++ - инкремент:
    i = i += 1

    i-- - декремент:
    i = i -= 1
    */

    int j = 0;
    int l = j++; // Постфиксный инкремент
    int k = ++j; // Префиксный инкремент, работает быстрее постфиксного
    std::cout << "l = " << l << std::endl;
    std::cout << "k = " << k << std::endl;

    j = 10;
    while (j > 0) {
        std::cout << j << std::endl;
        j--; // декремент
    }

    // do while. Отличается от while тем, что условие выполнится хотя бы один раз
    j = 0;
    do {
        std::cout << j << std::endl;
        j++;
    } while (j < 10);


    // for. Счётчик, условие и изменение счётчика пишется в скобках
    for (int j = 0; j < 10; j++) {
        std::cout << j << std::endl;
    }


    
    // continue - завершить цикл и перейти на следующую операцию
    int sum = 0;
    for (int i = 1; i < 100; i++) {
        if (i % 2 != 0)
            continue; // Сразу переходит на следующую стадию цикла
        std::cout << i << std::endl;
        sum += i;
    }


    // Поиск числа в последовательности, с которого сумма s > 1000
    int s = 0;
    for (int i = 1; i < 10000; i++) {
        s += i;
        if (s > 1000)
            break; // То есть цикл закончится сразу как только s превысит 1000
    }

    int sumOfDigits = 0; // lower camel-case - имя переменной начинается с прописной буквы
    int SumOfDigits = 0; // upper camel-case - имя переменной начинается со строчной буквы
    int sum_of_digits = 0; // шашлычный (лучший как по мне)
}